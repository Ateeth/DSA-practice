Question Link : https://leetcode.com/problems/kth-missing-positive-number/

Approach 1 : 
Note that the array is in strictly increasing order and hence there is no repetition.

Think of this case, if every element in the array > k , the answer would be k.

So, for every element <= k , you need to increment k. (i.e. when you iterate from left to right). And since the array is in increasing order, you can break out of the loop on the first instance this condition fails.

Solution : 
class Solution {
    public int findKthPositive(int[] arr, int k) {
        for(int i : arr){
			if(i <= k) k++; else break;
		}
        return k;
    }
}

Approach 2 : 
Explanation
Assume the final result is x,
And there are m number not missing in the range of [1, x].
Binary search the m in range [0, A.size()].

If there are m number not missing,
that is A[0], A[1] .. A[m-1],
the number of missing under A[m] is A[m] - 1 - m.

If A[m] - 1 - m < k, m is too small, we update left = m.
If A[m] - 1 - m >= k, m is big enough, we update right = m.

Note that, we exit the while loop, l = r,
which equals to the number of missing number used.
So the Kth positive number will be l + k.


Complexity
Time O(logN)
Space O(1)

Solution : 
    public int findKthPositive(int[] A, int k) {
        int l = 0, r = A.length, m;
        while (l < r) {
            m = (l + r) / 2;
            if (A[m] - 1 - m < k)
                l = m + 1;
            else
                r = m;
        }
        return l + k;
    }
