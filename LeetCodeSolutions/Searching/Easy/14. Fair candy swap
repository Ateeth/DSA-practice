Question Link : https://leetcode.com/problems/fair-candy-swap/

Approach : Get the total sum of candies with alice next the sum of candies with bob
Form the equation with x and y
Now iterate through aliceSizes array and look for an element in bobSizes array which satisfies the given equation using binary search
This is a variation of binary search

Solution : 
/*Let alice have Sa total , bob have Sb total
  Let alice give x bob give y candies
  Sa - x  + y = Sb - y + x
  Sa - Sb + 2y = 2x
  x = y + (Sa - Sb) / 2
  Return this x and y values
*/

class Solution {
    public int[] fairCandySwap(int[] aliceSizes, int[] bobSizes) {
        int sumA = 0;
        int sumB = 0;
        for(int x : aliceSizes){
            sumA += x ; 
        }
        for(int x : bobSizes){
            sumB += x ; 
        }
        Arrays.sort(bobSizes) ; 
        //equation x = y + (Sa - Sb) / 2
        int diff = (sumA - sumB)/2;
        for(int x : aliceSizes ){
            if(binarySearch(bobSizes , x - diff) != -1){
                return new int[]{x,binarySearch(bobSizes,x-diff)} ;
            }
        }
        return null;
    }
    
    public int binarySearch(int[] bobSizes , int target){
        int start = 0 ; 
        int end = bobSizes.length - 1 ; 
        while(start <= end){
            int mid = start + (end-start) / 2  ; 
            if(bobSizes[mid] == target){
                return bobSizes[mid] ; 
            }else if(bobSizes[mid] < target){
                start = mid + 1 ; 
            }else{
                end = mid - 1 ; 
            }
        }
        return -1 ; 
    }
}
