Question Link : https://leetcode.com/problems/count-negative-numbers-in-a-sorted-matrix/submissions/

Approach 1 : binary search all rows for a 0
Solution : 
class Solution {
    public int countNegatives(int[][] arr) {
        int rows=arr.length;
        int cols=arr[0].length;
        int count=0;
        for(int i=0;i<rows;i++){
            //if first value from row is negative all following are negative
            if(arr[i][0]<0){
                count+=cols;
                continue;
            }
            //if last value is positive all following are positive
            if(arr[i][cols-1]>0){
                continue;
            }else{
			    count+=binarySearch(arr,i,0,cols-1);
		    }
	    }
	    return count;
    }
    int binarySearch(int[][]arr, int row,int start,int end){
	    while(start <= end)	 {
		    int mid = start + (end - start)/2;
		    if(arr[row][mid]<0 &&arr[row][mid-1]>=0){
			    return arr[0].length - mid; //return the number of elements before this mid                     value as they will be less than 0
		    }
		    if(arr[row][mid]>=0){
			    start = mid + 1;
		    }else{
			    end = mid - 1;
		    }
	    }
	    return 0;
    }
}


Approach 2 : See for an element less than 0 and return rowlength - j
Solution:
class Solution {
    public int countNegatives(int[][] grid) {
        int count = 0;
        for(int i = 0; i < grid.length; i++){
            for(int j = 0; j < grid[i].length; j++){
                if(grid[i][j] < 0){
                count +=  grid[i].length - j;
                break;
                }
            }
        }
        return count;
    }
}
