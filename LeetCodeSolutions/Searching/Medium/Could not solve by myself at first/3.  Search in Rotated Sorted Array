Question Link : https://leetcode.com/problems/search-in-rotated-sorted-array/

Solution : 
class Solution {
    public int search(int[] nums, int target) {
        //first find the index of pivot element
        int pivot = findPivot(nums) ; //find the index of element which violates ascending order
        System.out.println(pivot);
        if(pivot == -1){
        //no pivot element was found so regular binary search whole array i.e the array was not rotated
            return binarySearch(nums , target , 0 , nums.length - 1 ) ;  
        }if(nums[pivot] == target){
            return pivot ; 
        }if(target >= nums[0]){ 
        //the pivot element has not been encountered yet the target lies before the pivot element so do regular binary search from start to pivot
            return binarySearch(nums , target , 0 , pivot - 1) ;
        }
        
        return binarySearch(nums , target , pivot + 1  , nums.length - 1) ; 
        //if the target is less than first element it lies after the pivot element so do binary search from pivot +1 element to the end
        
        //do not search with pivot element at all as it is not following binary search only
    }
    
    public int findPivot(int[] nums){
        int start = 0 , end = nums.length -1 ; 
        while(start <= end){
            int mid = start + (end - start) / 2 ; 
            if( mid < end && nums[mid] > nums[mid+1] ){ 
                //the element that is the part from where it is rotated if greater than next element it is no longer in ascending so return that index
                return mid ; 
            }if(mid > start && nums[mid] < nums[mid-1]){ 
                //mid element less than previous which means the previous element has violated ascending order hence it is the pivot element
                return mid - 1 ; 
            }if(nums[mid] <= nums[start] ){ 
                //in this case mid element is lesser than start element which means the pivot element must be to the left half of the mid element so do end = mid - 1
                end = mid - 1 ; 
            }else{ //last case pivot must be in the right side of current mid
                start = mid + 1 ;
            }
        }
        return -1 ; 
    }
    
    public int binarySearch(int[] nums , int target , int start , int end){
        while( start <= end ){
            int mid = start + (end - start) / 2  ; 
            if(nums[mid] == target){
                return mid ; 
            }else if(nums[mid] < target){
                start = mid + 1 ; 
            }else{
                end = mid - 1 ; 
            }
        }
        return -1 ; 
    }
}
