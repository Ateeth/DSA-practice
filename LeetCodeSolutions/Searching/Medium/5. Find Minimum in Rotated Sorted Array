Question Link : https://leetcode.com/problems/find-minimum-in-rotated-sorted-array/

Solution : 
//just return min of first element and element after pivot
class Solution {
    public int findMin(int[] nums) {
        int pivot = findPivot(nums) ; 
        if(nums.length == 1){
            return nums[0] ; 
        }
        if( pivot == -1 ){
            return Math.min(nums[0] , nums[1]) ; 
        }
        else if(nums[0] >= nums[pivot + 1]){
            return nums[pivot + 1] ; 
        }
        else{
            return nums[0] ; 
        }
    }
    
      public int findPivot(int[] nums){
        int start = 0 , end = nums.length -1 ; 
        while(start <= end){
            int mid = start + (end - start) / 2 ; 
            if( mid < end && nums[mid] > nums[mid+1] ){ 
                //the element that is the part from where it is rotated if greater than next element it is no longer in ascending so return that index
                return mid ; 
            }if(mid > start && nums[mid] < nums[mid-1]){ 
                //mid element less than previous which means the previous element has violated ascending order hence it is the pivot element
                return mid - 1 ; 
            }if(nums[mid] <= nums[start] ){ 
                //in this case mid element is lesser than start element which means the pivot element must be to the left half of the mid element so do end = mid - 1
                end = mid - 1 ; 
            }else{ //last case pivot must be in the right side of current mid
                start = mid + 1 ;
            }
        }
        return -1 ; 
    }
}
