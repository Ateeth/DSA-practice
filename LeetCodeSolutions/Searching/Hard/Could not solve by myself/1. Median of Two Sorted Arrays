Question Link : https://leetcode.com/problems/median-of-two-sorted-arrays/

Video Link for solution explanation : https://youtu.be/NTop3VTjmxk 

Solution : 
class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        if(nums2.length < nums1.length){
            return findMedianSortedArrays(nums2,nums1) ; 
        }
        int n1 = nums1.length ; 
        int n2 = nums2.length ; 
        int low = 0 , high = n1 ; 
        
        while(low <= high){ 
            int cut1 = (low + high) / 2  ; //cut1 is number of elements to be taken from first array in left partition
            int cut2 = (n1 + n2 + 1) / 2 - cut1 ;  //cut2 is number of elements to be taken from second array in left partition
            
            int left1 = cut1 == 0 ? Integer.MIN_VALUE : nums1[cut1-1] ; //if cut1 is 0 assign min val to left1
            int left2 = cut2 == 0 ? Integer.MIN_VALUE : nums2[cut2-1] ; //if cut2 is 0 assign min val to left2
            
            //similar to above 2 statements
            int right1 = cut1 == n1 ? Integer.MAX_VALUE : nums1[cut1] ; 
            int right2 = cut2 == n2 ? Integer.MAX_VALUE : nums2[cut2] ; 
            
            if(left1 <= right2 && left2 <= right1){ //valid partition has been found
                if( ( n1 + n2 ) % 2 == 0 ){
                    return (Math.max(left1 , left2) + Math.min(right1 , right2)) / 2.0 ; 
                }else{
                    return Math.max(left1 , left2) ; 
                }
            }else if(left1 > right2){ //change the high as it is invalid partition left1 > right2 we r trying to reduce left1 so we do high = cut1 - 1
                high = cut1 - 1 ; 
            }else{ //change the low as it is invalid partition left2 > right1 we r trying to reduce left2 so we do low = cut1 + 1
                low = cut1 + 1 ; 
            }
        }
        return 0.0 ; 
    }
}
